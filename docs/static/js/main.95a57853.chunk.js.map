{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"0MA4BeA,EAzBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KASA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,OAC5CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAAU,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,8BClBnCG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACfC,EADe,iDACiCC,UACpDR,GAFmB,+DAIFS,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAChB,YAOE,MAAO,CACLC,GAFE,EALJA,GAQEC,MAHE,EAJJA,MAQET,IAJE,EAHJU,OACEC,iBAAoBX,QAZL,kBAsBdM,GAtBc,4CAAH,sDCWLM,EATK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAC5B,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCeKO,EAhBC,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SACjB,ECH0B,SAACA,GAC3B,MAA0BR,mBAAS,CACjCoB,KAAM,GACNY,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACRtB,EAAQL,GAAU4B,MAAK,SAACC,GACtBH,EAAS,CAAEd,KAAMiB,EAAML,SAAS,SAEjC,CAACxB,IAEGyB,EDT2BK,CAAa9B,GAAjCiB,EAAd,EAAQL,KAAcY,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKxB,IACJwB,GAAW,mBAAGJ,UAAU,iBAAb,wBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOH,KAAI,SAACiB,GAAD,OACV,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBC,IAAKD,EAAIhB,eEQ1BkB,EAlBM,WACnB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG2C,EAAWpB,KAAI,SAACd,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCRxBmC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.95a57853.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((category) => [inputValue, ...category]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=crJWyE6IJM5YWaC7sesOBuYUeOPHf5D1`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(\n    ({\n      id,\n      title,\n      images: {\n        downsized_medium: { url },\n      },\n    }) => {\n      return {\n        id: id,\n        title: title,\n        url: url,\n      };\n    }\n  );\n  return gifs;\n};\n","import React from 'react';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p className=\"animate__pulse\">Loading...</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem {...img} key={img.id} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({ data: imgs, loading: false });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['HunterXHunter']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}